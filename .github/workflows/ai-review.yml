name: AI Code Review
permissions:
  contents: read
  pull-requests: write

on:
  pull_request_target:

jobs:
  review:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout do código do PR
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.repository.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Extrair diff do PR
        run: |
          BASE=${{ github.event.pull_request.base.ref }}
          git fetch origin "$BASE"
          git diff origin/"$BASE"...HEAD > pr.diff

      - name: Montar payload e chamar OpenAI
        id: call_openai
        run: |
          # Monta o JSON de requisição
          cat <<EOF > payload.json
          {
            "model": "gpt-3.5-turbo",
            "temperature": 0.2,
            "max_tokens": 1024,
            "messages": [
              { "role": "system", "content": "Você é um revisor de código experiente." },
              {
                "role": "user",
                "content": "Analise o diff abaixo e aponte bugs, violações de estilo e sugestões:\n\`\`\`\n$(sed 's/"/\\"/g' pr.diff)\n\`\`\`"
              }
            ]
          }
          EOF

          # Chama a API e salva a resposta bruta
          curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            --data @payload.json \
            > raw_response.json

          # Log de debug para inspecionar a resposta
          echo "=== RAW OPENAI RESPONSE ==="
          cat raw_response.json
          echo "==========================="

          # Se der erro, capture a mensagem de erro
          ERROR=$(jq -r '.error.message? // empty' raw_response.json)
          if [ -n "$ERROR" ]; then
            echo "::error::OpenAI returned error: $ERROR"
            echo "comments<<EOF" >> $GITHUB_OUTPUT
            echo "❌ OpenAI API error: $ERROR" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Caso não tenha erro, tente extrair o conteúdo
          COMMENT=$(jq -r '.choices[0].message.content? // empty' raw_response.json)
          if [ -z "$COMMENT" ]; then
            echo "::warning::OpenAI returned no content"
            COMMENT="ℹ️ Nenhuma resposta gerada pela OpenAI."
          fi

          # Exporta para o próximo step
          echo "comments<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT"    >> $GITHUB_OUTPUT
          echo "EOF"         >> $GITHUB_OUTPUT

      - name: Publicar comentários no PR
        run: |
          gh pr comment "${{ github.event.pull_request.number }}" \
            --body "${{ steps.call_openai.outputs.comments }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
